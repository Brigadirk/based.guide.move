version: '3.8'

services:
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - PORT=5001
      - HOST=0.0.0.0
      - ENVIRONMENT=development
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - OPEN_EXCHANGE_API_KEY=${OPEN_EXCHANGE_API_KEY}
    volumes:
      - ./apps/backend/src:/app/src
      - ./apps/backend/services:/app/services
      - ./schemas:/app/schemas
      - backend_data:/app/data
    depends_on:
      - postgres
    networks:
      - basedguide_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:5001
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - basedguide_network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: basedguide_dev
      POSTGRES_USER: basedguide
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - basedguide_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U basedguide -d basedguide_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - basedguide_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  backend_data:

networks:
  basedguide_network:
    driver: bridge
